function [] = test5()
tol = 1e-10;
maxit = 1e3;
s = 100;
v = s/2;
start = "Test 5\n" + ...
    "Test ten sprawdza poprawność\n" + ...
    "działania metody dla dużych macierzy.\n" + ...
    "Wylosowana zostanie macierz trójkątna A - %d x %d\n" + ...
    "o elementach z przedziału [0, %d].\n" + ...
    "Następnie dodana zostanie do macierzy macierz %d * I\n" + ...
    "Następnie ustawione zostaną dwie wartości własne\n" + ...
    "na %d i %d.\n" + ...
    "Następnie wymnożona zostanie macierz A przez macierz unitarną B\n" + ...
    "z lewej strony i przez B^-1 z prawej.\n" + ...
    "Następnie będziemy sprawdzać wyniki metody w zależności\n" + ...
    "Od parametru miu.\n" + ...
    "Maksymalna liczba iteracji = %d\n" + ...
    "Maksymalny dopuszczalny błąd = %d\n" + ...
    "Uwarunkowanie macierzy: %f\n";
fprintf("==========================================================" + ...
        "===============\n");

U = triu(randi(s, s, s) + eye(s) * s);
U(1,1) = v;
U(2,2) = v/2;
fprintf(start, s, s, s, s, v, v/2, maxit, tol, cond(U));
pause;
A = gallery("orthog", s);
A = A*U*A';

for miu = 0 : s/4 : s
    [res, it, err] = P2Z10_AZY_eigenvalue(A, miu, tol, maxit);
    fprintf("==========================================================" + ...
        "===============\n");
    fprintf("│wyznaczona wartość%*s│błąd przybliżeń%*s" + ...
        "│liczba iteracji%*s│miu%*s|\n", 4,"",  0,"", 0, "", 11, "");
    fprintf("===========================================================" + ...
        "==============\n");
    fprintf("│%-+10f%-+10fi │%-15d│%-15d│%-14f|\n", real(res), imag(res), err, it, miu);
    fprintf("===========================================================" + ...
        "==============\n\n");
    pause;
end

end% function

